1）kmp算法

2）分治算法

3）图的深度优化遍历算法（DFS）+贪心算法

--------



## 稀疏数组

![1717477107386](C:\Users\14700\AppData\Roaming\Typora\typora-user-images\1717477107386.png)

​																				⬇️

# 																			![1717476580670](C:\Users\14700\AppData\Roaming\Typora\typora-user-images\1717476580670.png)

1. 原本存储内容7 * 6 = **42**个数
2. 转化为稀疏数组后 变为   3 * 9=**27**个数

<img src="C:\Users\14700\AppData\Roaming\Typora\typora-user-images\1717477543408.png" alt="1717477543408" style="zoom:50%;" />

----



**稀疏数组转换的思路分析**

![1717479009443](C:\Users\14700\AppData\Roaming\Typora\typora-user-images\1717479009443.png)



**代码实现**：

```java
public class SparseArray{
    public static void main(String[] args){
        //创建一个原始的二维数组11*11
        //0：表示没有棋子，1表示 黑子，2 表示篮子
        int chessArr1[][] = new int[11][11]
        chessArr1[1][2] = 1;
        chessArr1[2][3] = 2;
        //输出原始的二维数组
        System.out.println("原始的二维数组");
        for(int[] row : chessArr1){
            for(int[] data : row){
                System.out.println("%d\t,data");
            }
            System.out.println();
        }
        //将二维数组 转 稀疏数组的思路
        //1. 先遍历二维数组 得到非0数据的个数
        int sum = 0;
        for(int i = 0; i < 11; i++){
            for(int j = 0; j < 11; j++){
                if(chessArr1[i][j] != 0){
                    sum++;
                }
            }
        }
        //2. 创建对应的稀疏数组
        int sparseArr[][] = new int[sum+1][3];
        //给稀疏数组赋值
        sparseArr[0][0] = 11;
        sparseArr[0][1] = 11;
        sparseArr[0][2] = sum;
        
        //遍历二维数组，将非0的值存放到sparseArr中
        int count = 0;
        for(int i = 0; i < 11; i++){
            for(int j = 0; j < 11; j++){
                if(chessArr1[i][j] != 0){
                    count++;
                    sparseArr[countcount][0] = i;
                    sparseArr[count][1] = j;
                    sparseArr[count][2] = chessArr1[i][j];
                }
            }
        }
        //输出稀疏数组的形式
        System.out.println();
        System.out.println("得到稀疏数组为~~~~");
        for(int i = 0; i < sparseArr.length; i++){
            System.out.println("%d\t%d\%dt\t",sparseArr[i][0],sparseArr[i]									[1],sparseArr[i][2]);
        }
        System.out.println();
        
        //将稀疏数组--》恢复成原始的二维数组
        int chessArr2[][] = new int[sparseArr[0][0],sparseArr[0][1]];
        
        int(int i = 1; i < sparseArr.length; i++){
            chessArr2[sparseArr[i][0]][sparseArr[1][1]] = sparseArr[i][2];
        }
        //输出恢复后的二维数组
        System.out.println();
        System.out.println("恢复后的二维数组");
        
       for(int[] row : chessArr2){
            for(int[] data : row){
                System.out.println("%d\t,data");
            }
            System.out.println();
        }
    }
}
```

